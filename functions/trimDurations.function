#!/usr/bin/env bash
#
# Internal function: Trim duration files by only keeping the last maxLines for scriptName.
#
# Duration files are tab separated -- used to record script durations for predictions and stats
#
#     Script Name         Timestamp              Date String             Duration
# generateXrefData.sh   201210.202416   Thu Dec 10 20:24:16 PST 2020    16 seconds.
#
# Timestamp and Date String are the same time, Timestamp for sorting. Date String for humans.

function trimDurations() {
    local OPTIND scriptName maxLines linesFound

    source functions/define_files

    help() {
        cat <<EOF
trimDurations -- Internal function: Limit the number of durations kept.

Only keep the last maxLines durations of any script so the durations file
doesn't grow without bounds -- maxLines defaults to 10.

USAGE:
    trimDurations [OPTIONS...] [maxLines]

OPTIONS:
    -h      Print this message.

EXAMPLES:
    trimDurations
    trimDurations 5
EOF
    }

    while getopts ":h" opt; do
        case $opt in
        h)
            help
            waitUntil -k
            return
            ;;
        \?)
            printf "==> [${YELLOW}Warning${NO_COLOR}] Ignoring invalid " >&2
            printf "${YELLOW}-$OPTARG${NO_COLOR} option in: ${YELLOW}$0${NO_COLOR}\n" >&2
            ;;
        :)
            printf "==> [${RED}Error${NO_COLOR}] Option ${RED}-$OPTARG${NO_COLOR} " >&2
            printf "in: ${RED}$0${NO_COLOR} requires an argument.'\n\n" >&2
            exit 1
            ;;
        esac
    done
    shift $((OPTIND - 1))

    scriptName="$(basename "$0")"
    maxLines="${1:-10}"

    linesFound=$(rg -c "^$scriptName\t" "$durationFile")
    if [[ $linesFound -gt $maxLines ]]; then
        TMPFILE=$(mktemp)
        rg "^$scriptName\t" "$durationFile" | tail -"$maxLines" >"$TMPFILE"
        rg -v "^$scriptName\t" "$durationFile" >>"$TMPFILE"
        sort -f -t$'\t' --key=2,2 "$TMPFILE" >"$durationFile"
        rm -rf "$TMPFILE"
    fi
}
